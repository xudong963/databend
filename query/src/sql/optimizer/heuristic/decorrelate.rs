// Copyright 2022 Datafuse Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::collections::HashSet;

use common_datavalues::type_coercion::merge_types;
use common_datavalues::BooleanType;
use common_datavalues::DataTypeImpl;
use common_datavalues::DataValue;
use common_datavalues::Int64Type;
use common_datavalues::NullableType;
use common_datavalues::UInt64Type;
use common_exception::ErrorCode;
use common_exception::Result;

use crate::sql::binder::wrap_cast_if_needed;
use crate::sql::binder::JoinCondition;
use crate::sql::optimizer::heuristic::subquery_rewriter::SubqueryRewriter;
use crate::sql::optimizer::heuristic::subquery_rewriter::UnnestResult;
use crate::sql::optimizer::ColumnSet;
use crate::sql::optimizer::RelExpr;
use crate::sql::optimizer::SExpr;
use crate::sql::plans::Aggregate;
use crate::sql::plans::AggregateFunction;
use crate::sql::plans::AggregateMode;
use crate::sql::plans::AndExpr;
use crate::sql::plans::BoundColumnRef;
use crate::sql::plans::CastExpr;
use crate::sql::plans::ComparisonExpr;
use crate::sql::plans::ConstantExpr;
use crate::sql::plans::EvalScalar;
use crate::sql::plans::Filter;
use crate::sql::plans::FunctionCall;
use crate::sql::plans::JoinType;
use crate::sql::plans::LogicalGet;
use crate::sql::plans::LogicalInnerJoin;
use crate::sql::plans::OrExpr;
use crate::sql::plans::PatternPlan;
use crate::sql::plans::Project;
use crate::sql::plans::RelOp;
use crate::sql::plans::RelOperator;
use crate::sql::plans::Scalar;
use crate::sql::plans::ScalarItem;
use crate::sql::plans::SubqueryExpr;
use crate::sql::plans::SubqueryType;
use crate::sql::ColumnBinding;
use crate::sql::IndexType;
use crate::sql::MetadataRef;
use crate::sql::ScalarExpr;

/// Decorrelate subqueries inside `s_expr`.
///
/// We only need to process three kinds of join: Scalar Subquery, Any Subquery, and Exists Subquery.
/// Other kinds of subqueries have be converted to one of the above subqueries in `type_check`.
///
/// It will rewrite `s_expr` to all kinds of join.
/// Correlated scalar subquery -> Single join
/// Any subquery -> Marker join
/// Correlated exists subquery -> Marker join
///
/// More information can be found in the paper: Unnesting Arbitrary Queries
pub fn decorrelate_subquery(metadata: MetadataRef, s_expr: SExpr) -> Result<SExpr> {
    let mut rewriter = SubqueryRewriter::new(metadata);
    let hoisted = rewriter.rewrite(&s_expr)?;

    Ok(hoisted)
}
impl SubqueryRewriter {
    // Try to decorrelate a `CrossApply` into `SemiJoin` or `AntiJoin`.
    // We only do simple decorrelation here, the scheme is:
    // 1. If the subquery is correlated, we will try to decorrelate it into `SemiJoin`
    pub fn try_decorrelate_simple_subquery(
        &self,
        input: &SExpr,
        subquery: &SubqueryExpr,
    ) -> Result<Option<SExpr>> {
        if subquery.outer_columns.is_empty() {
            return Ok(None);
        }

        // TODO(leiysky): this is the canonical plan generated by Binder, we should find a proper
        // way to address such a pattern.
        //
        // Project
        //  \
        //   EvalScalar
        //    \
        //     Filter
        //      \
        //       Get
        let pattern = SExpr::create_unary(
            PatternPlan {
                plan_type: RelOp::Project,
            }
            .into(),
            SExpr::create_unary(
                PatternPlan {
                    plan_type: RelOp::EvalScalar,
                }
                .into(),
                SExpr::create_unary(
                    PatternPlan {
                        plan_type: RelOp::Filter,
                    }
                    .into(),
                    SExpr::create_leaf(
                        PatternPlan {
                            plan_type: RelOp::LogicalGet,
                        }
                        .into(),
                    ),
                ),
            ),
        );

        if !subquery.subquery.match_pattern(&pattern) {
            return Ok(None);
        }

        let filter_tree = subquery
            .subquery // Project
            .child(0)? // EvalScalar
            .child(0)?; // Filter
        let filter_expr = RelExpr::with_s_expr(filter_tree);
        let filter: Filter = subquery
            .subquery // Project
            .child(0)? // EvalScalar
            .child(0)? // Filter
            .plan()
            .clone()
            .try_into()?;
        let filter_prop = filter_expr.derive_relational_prop()?;
        let filter_child_prop = filter_expr.derive_relational_prop_child(0)?;

        let input_expr = RelExpr::with_s_expr(input);
        let input_prop = input_expr.derive_relational_prop()?;

        // First, we will check if all the outer columns are in the filter.
        if !filter_child_prop.outer_columns.is_empty() {
            return Ok(None);
        }

        // Second, we will check if the filter only contains equi-predicates.
        // This is not necessary, but it is a good heuristic for most cases.
        let mut left_conditions = vec![];
        let mut right_conditions = vec![];
        let mut other_conditions = vec![];
        let mut left_filters = vec![];
        let mut right_filters = vec![];
        for pred in filter.predicates.iter() {
            let join_condition = JoinCondition::new(pred, &input_prop, &filter_prop);
            match join_condition {
                JoinCondition::Left(filter) => {
                    left_filters.push(filter.clone());
                }
                JoinCondition::Right(filter) => {
                    right_filters.push(filter.clone());
                }

                JoinCondition::Other(pred) => {
                    other_conditions.push(pred.clone());
                }

                JoinCondition::Both { left, right } => {
                    let join_type = merge_types(&left.data_type(), &right.data_type())?;
                    let left = wrap_cast_if_needed(left.clone(), &join_type);
                    let right = wrap_cast_if_needed(right.clone(), &join_type);
                    left_conditions.push(left);
                    right_conditions.push(right);
                }
            }
        }

        let join = LogicalInnerJoin {
            left_conditions,
            right_conditions,
            other_conditions,
            join_type: match &subquery.typ {
                SubqueryType::Any | SubqueryType::All | SubqueryType::Scalar => {
                    return Ok(None);
                }
                SubqueryType::Exists => JoinType::Semi,
                SubqueryType::NotExists => JoinType::Anti,
            },
            marker_index: None,
            from_correlated_subquery: true,
        };

        // Rewrite plan to semi-join.
        let mut left_child = input.clone();
        if !left_filters.is_empty() {
            left_child = SExpr::create_unary(
                Filter {
                    predicates: left_filters,
                    is_having: false,
                }
                .into(),
                left_child,
            );
        }

        // Remove `Filter` from subquery.
        let mut right_child = SExpr::create_unary(
            subquery.subquery.plan().clone(),
            SExpr::create_unary(
                subquery.subquery.child(0)?.plan().clone(),
                SExpr::create_leaf(filter_tree.child(0)?.plan().clone()),
            ),
        );
        if !right_filters.is_empty() {
            right_child = SExpr::create_unary(
                Filter {
                    predicates: right_filters,
                    is_having: false,
                }
                .into(),
                right_child,
            );
        }
        // Add project for join keys
        let mut used_columns = join
            .right_conditions
            .iter()
            .fold(ColumnSet::new(), |v, acc| {
                v.union(&acc.used_columns()).cloned().collect()
            });
        used_columns = used_columns
            .union(
                &join
                    .other_conditions
                    .iter()
                    .fold(ColumnSet::new(), |v, acc| {
                        v.union(&acc.used_columns()).cloned().collect()
                    }),
            )
            .cloned()
            .collect();
        used_columns = used_columns
            .difference(
                &used_columns
                    .intersection(&input_prop.output_columns)
                    .cloned()
                    .collect(),
            )
            .cloned()
            .collect();

        right_child = SExpr::create_unary(
            Project {
                columns: used_columns,
            }
            .into(),
            right_child,
        );

        let result = SExpr::create_binary(join.into(), left_child, right_child);

        Ok(Some(result))
    }

    pub fn try_decorrelate_subquery(
        &mut self,
        left: &SExpr,
        subquery: &SubqueryExpr,
        is_conjunctive_predicate: bool,
    ) -> Result<(SExpr, UnnestResult)> {
        match subquery.typ {
            SubqueryType::Scalar => {
                let correlated_columns = subquery.outer_columns.clone();
                let flatten_plan = self.flatten(&subquery.subquery, &correlated_columns)?;
                // Construct single join
                let mut left_conditions = Vec::with_capacity(correlated_columns.len());
                let mut right_conditions = Vec::with_capacity(correlated_columns.len());
                self.add_equi_conditions(
                    &correlated_columns,
                    &mut right_conditions,
                    &mut left_conditions,
                )?;
                let join_plan = LogicalInnerJoin {
                    left_conditions,
                    right_conditions,
                    other_conditions: vec![],
                    join_type: JoinType::Single,
                    marker_index: None,
                    from_correlated_subquery: true,
                };
                let s_expr = SExpr::create_binary(join_plan.into(), left.clone(), flatten_plan);
                Ok((s_expr, UnnestResult::SingleJoin))
            }
            SubqueryType::Exists => {
                if is_conjunctive_predicate {
                    if let Some(result) = self.try_decorrelate_simple_subquery(left, subquery)? {
                        return Ok((result, UnnestResult::SimpleJoin));
                    }
                }
                let correlated_columns = subquery.outer_columns.clone();
                let flatten_plan = self.flatten(&subquery.subquery, &correlated_columns)?;
                // Construct mark join
                let mut left_conditions = Vec::with_capacity(correlated_columns.len());
                let mut right_conditions = Vec::with_capacity(correlated_columns.len());
                self.add_equi_conditions(
                    &correlated_columns,
                    &mut left_conditions,
                    &mut right_conditions,
                )?;
                let marker_index = if let Some(idx) = subquery.index {
                    idx
                } else {
                    self.metadata.write().add_column(
                        "marker".to_string(),
                        NullableType::new_impl(BooleanType::new_impl()),
                        None,
                    )
                };
                let join_plan = LogicalInnerJoin {
                    left_conditions,
                    right_conditions,
                    other_conditions: vec![],
                    join_type: JoinType::Mark,
                    marker_index: Some(marker_index),
                    from_correlated_subquery: true,
                };
                let s_expr = SExpr::create_binary(join_plan.into(), flatten_plan, left.clone());
                Ok((s_expr, UnnestResult::MarkJoin { marker_index }))
            }
            SubqueryType::Any => {
                let correlated_columns = subquery.outer_columns.clone();
                let flatten_plan = self.flatten(&subquery.subquery, &correlated_columns)?;
                let rel_expr = RelExpr::with_s_expr(&flatten_plan);
                let mut left_conditions = Vec::with_capacity(correlated_columns.len());
                let mut right_conditions = Vec::with_capacity(correlated_columns.len());
                self.add_equi_conditions(
                    &correlated_columns,
                    &mut left_conditions,
                    &mut right_conditions,
                )?;
                let output_columns: HashSet<_> = rel_expr
                    .derive_relational_prop()?
                    .output_columns
                    .difference(
                        &self
                            .derived_columns
                            .values()
                            .cloned()
                            .collect::<HashSet<_>>(),
                    )
                    .cloned()
                    .collect();
                assert_eq!(output_columns.len(), 1);
                let index = output_columns
                    .iter()
                    .take(1)
                    .next()
                    .ok_or_else(|| ErrorCode::LogicalError("Invalid subquery"))?;
                let column_name = format!("subquery_{}", index);
                let right_condition = Scalar::BoundColumnRef(BoundColumnRef {
                    column: ColumnBinding {
                        database_name: None,
                        table_name: None,
                        column_name,
                        index: *index,
                        data_type: subquery.data_type.clone(),
                        visible_in_unqualified_wildcard: false,
                    },
                });
                let child_expr = *subquery.child_expr.as_ref().unwrap().clone();
                let op = subquery.compare_op.as_ref().unwrap().clone();
                // Make <child_expr op right_condition> as other_conditions even if op is equal operator.
                // Because it's not null-safe.
                let other_conditions = vec![Scalar::ComparisonExpr(ComparisonExpr {
                    op,
                    left: Box::new(child_expr),
                    right: Box::new(right_condition),
                    return_type: Box::new(NullableType::new_impl(BooleanType::new_impl())),
                })];
                let marker_index = if let Some(idx) = subquery.index {
                    idx
                } else {
                    self.metadata.write().add_column(
                        "marker".to_string(),
                        NullableType::new_impl(BooleanType::new_impl()),
                        None,
                    )
                };
                let mark_join = LogicalInnerJoin {
                    left_conditions,
                    right_conditions,
                    other_conditions,
                    join_type: JoinType::Mark,
                    marker_index: Some(marker_index),
                    from_correlated_subquery: true,
                }
                .into();
                Ok((
                    SExpr::create_binary(mark_join, flatten_plan.clone(), left.clone()),
                    UnnestResult::MarkJoin { marker_index },
                ))
            }
            _ => unreachable!(),
        }
    }

    fn flatten(&mut self, plan: &SExpr, correlated_columns: &ColumnSet) -> Result<SExpr> {
        let rel_expr = RelExpr::with_s_expr(plan);
        let prop = rel_expr.derive_relational_prop()?;
        if prop.outer_columns.is_empty() {
            // Construct a LogicalGet plan by correlated columns.
            // Finally generate a cross join, so we finish flattening the subquery.
            let mut metadata = self.metadata.write();
            // Currently, we don't support left plan's from clause contains subquery.
            // Such as: select t2.a from (select a + 1 as a from t) as t2 where (select sum(a) from t as t1 where t1.a < t2.a) = 1;
            let table_index = metadata
                .table_index_by_column_indexes(correlated_columns)
                .unwrap();
            for correlated_column in correlated_columns.iter() {
                let column_entry = metadata.column(*correlated_column).clone();
                self.derived_columns.insert(
                    *correlated_column,
                    metadata.add_column(
                        column_entry.name.clone(),
                        if let DataTypeImpl::Nullable(_) = column_entry.data_type {
                            column_entry.data_type.clone()
                        } else {
                            DataTypeImpl::Nullable(NullableType::create(
                                column_entry.data_type.clone(),
                            ))
                        },
                        None,
                    ),
                );
            }
            let logical_get = SExpr::create_leaf(
                LogicalGet {
                    table_index,
                    columns: self.derived_columns.values().cloned().collect(),
                    push_down_predicates: None,
                }
                .into(),
            );
            // Todo(xudong963): Wrap logical get with distinct to eliminate duplicates rows.
            let cross_join = LogicalInnerJoin {
                left_conditions: vec![],
                right_conditions: vec![],
                other_conditions: vec![],
                join_type: JoinType::Cross,
                marker_index: None,
                from_correlated_subquery: false,
            }
            .into();
            return Ok(SExpr::create_binary(cross_join, logical_get, plan.clone()));
        }

        match plan.plan() {
            RelOperator::Project(project) => {
                let flatten_plan = self.flatten(plan.child(0)?, correlated_columns)?;
                let mut columns = HashSet::with_capacity(project.columns.len());
                for column_idx in project.columns.iter() {
                    let scalar = {
                        let metadata = self.metadata.read();
                        let column_entry = metadata.column(*column_idx);
                        Scalar::BoundColumnRef(BoundColumnRef {
                            column: ColumnBinding {
                                database_name: None,
                                table_name: None,
                                column_name: "".to_string(),
                                index: column_entry.column_index,
                                data_type: Box::from(column_entry.data_type.clone()),
                                visible_in_unqualified_wildcard: false,
                            },
                        })
                    };
                    let flatten_scalar = self.flatten_scalar(&scalar, correlated_columns)?;
                    columns.extend(flatten_scalar.used_columns().iter());
                }
                columns.extend(self.derived_columns.values());
                dbg!(columns.clone());
                Ok(SExpr::create_unary(
                    Project { columns }.into(),
                    flatten_plan,
                ))
            }
            RelOperator::EvalScalar(eval_scalar) => {
                let flatten_plan = self.flatten(plan.child(0)?, correlated_columns)?;
                let mut items = Vec::with_capacity(eval_scalar.items.len());
                for item in eval_scalar.items.iter() {
                    dbg!(item.from_count_func);
                    let scalar = if item.from_count_func {
                        // convert count aggregate function to multi_if function, if count() is null, then 0 else count()
                        let is_null = Scalar::FunctionCall(FunctionCall {
                            arguments: vec![item.scalar.clone()],
                            func_name: "is_null".to_string(),
                            arg_types: vec![NullableType::new_impl(UInt64Type::new_impl())],
                            return_type: Box::new(BooleanType::new_impl()),
                        });
                        let zero = Scalar::ConstantExpr(ConstantExpr {
                            value: DataValue::UInt64(0),
                            data_type: Box::new(UInt64Type::new_impl()),
                        });
                        Scalar::FunctionCall(FunctionCall {
                            arguments: vec![is_null, zero, item.scalar.clone()],
                            func_name: "multi_if".to_string(),
                            arg_types: vec![
                                BooleanType::new_impl(),
                                UInt64Type::new_impl(),
                                UInt64Type::new_impl(),
                            ],
                            return_type: Box::new(UInt64Type::new_impl()),
                        })
                    } else {
                        item.scalar.clone()
                    };
                    dbg!(item.index);
                    let new_item = ScalarItem {
                        scalar: self.flatten_scalar(&scalar, correlated_columns)?,
                        index: item.index,
                        from_count_func: item.from_count_func,
                    };
                    items.push(new_item);
                }
                let metadata = self.metadata.read();
                for derived_column in self.derived_columns.values() {
                    let column_entry = metadata.column(*derived_column);
                    let column_binding = ColumnBinding {
                        database_name: None,
                        table_name: None,
                        column_name: format!("subquery_{}", derived_column),
                        index: *derived_column,
                        data_type: Box::from(column_entry.data_type.clone()),
                        visible_in_unqualified_wildcard: false,
                    };
                    items.push(ScalarItem {
                        scalar: Scalar::BoundColumnRef(BoundColumnRef {
                            column: column_binding,
                        }),
                        index: *derived_column,
                        from_count_func: false,
                    });
                }
                Ok(SExpr::create_unary(
                    EvalScalar { items }.into(),
                    flatten_plan,
                ))
            }
            RelOperator::Filter(filter) => {
                let flatten_plan = self.flatten(plan.child(0)?, correlated_columns)?;
                let mut predicates = Vec::with_capacity(filter.predicates.len());
                for predicate in filter.predicates.iter() {
                    predicates.push(self.flatten_scalar(predicate, correlated_columns)?);
                }
                let filter_plan = Filter {
                    predicates,
                    is_having: filter.is_having,
                }
                .into();
                Ok(SExpr::create_unary(filter_plan, flatten_plan))
            }
            RelOperator::LogicalInnerJoin(join) => {
                // Currently, we don't support join conditions contain subquery
                let left_flatten_plan = self.flatten(plan.child(0)?, correlated_columns)?;
                let right_flatten_plan = self.flatten(plan.child(1)?, correlated_columns)?;
                Ok(SExpr::create_binary(
                    LogicalInnerJoin {
                        left_conditions: join.left_conditions.clone(),
                        right_conditions: join.right_conditions.clone(),
                        other_conditions: join.other_conditions.clone(),
                        join_type: join.join_type.clone(),
                        marker_index: join.marker_index,
                        from_correlated_subquery: false,
                    }
                    .into(),
                    left_flatten_plan,
                    right_flatten_plan,
                ))
            }
            RelOperator::Aggregate(aggregate) => {
                let flatten_plan = self.flatten(plan.child(0)?, correlated_columns)?;
                let mut group_items = Vec::with_capacity(aggregate.group_items.len());
                for item in aggregate.group_items.iter() {
                    let scalar = self.flatten_scalar(&item.scalar, correlated_columns)?;
                    group_items.push(ScalarItem {
                        scalar,
                        index: item.index,
                        from_count_func: item.from_count_func,
                    })
                }
                for derived_column in self.derived_columns.values() {
                    let column_binding = {
                        let metadata = self.metadata.read();
                        let column_entry = metadata.column(*derived_column);
                        ColumnBinding {
                            database_name: None,
                            table_name: None,
                            column_name: format!("subquery_{}", derived_column),
                            index: *derived_column,
                            data_type: Box::from(column_entry.data_type.clone()),
                            visible_in_unqualified_wildcard: false,
                        }
                    };
                    group_items.push(ScalarItem {
                        scalar: Scalar::BoundColumnRef(BoundColumnRef {
                            column: column_binding,
                        }),
                        index: *derived_column,
                        from_count_func: false,
                    });
                }
                let mut agg_items = Vec::with_capacity(aggregate.aggregate_functions.len());
                for item in aggregate.aggregate_functions.iter() {
                    let scalar = self.flatten_scalar(&item.scalar, correlated_columns)?;
                    agg_items.push(ScalarItem {
                        scalar,
                        index: item.index,
                        from_count_func: item.from_count_func,
                    })
                }
                Ok(SExpr::create_unary(
                    Aggregate {
                        mode: AggregateMode::Initial,
                        group_items,
                        aggregate_functions: agg_items,
                        from_distinct: aggregate.from_distinct,
                    }
                    .into(),
                    flatten_plan,
                ))
            }
            RelOperator::Sort(_) | RelOperator::Limit(_) => {
                // Currently, we don't support sort and limit contain subquery.
                let flatten_plan = self.flatten(plan.child(0)?, correlated_columns)?;
                Ok(SExpr::create_unary(plan.plan().clone(), flatten_plan))
            }

            RelOperator::Exchange(_)
            | RelOperator::Pattern(_)
            | RelOperator::LogicalGet(_)
            | RelOperator::PhysicalScan(_)
            | RelOperator::PhysicalHashJoin(_) => Err(ErrorCode::LogicalError(
                "Invalid plan type for flattening subquery",
            )),
        }
    }

    fn flatten_scalar(
        &mut self,
        scalar: &Scalar,
        correlated_columns: &ColumnSet,
    ) -> Result<Scalar> {
        match scalar {
            Scalar::BoundColumnRef(bound_column) => {
                let column_binding = bound_column.column.clone();
                if correlated_columns.contains(&column_binding.index) {
                    let index = self.derived_columns.get(&column_binding.index).unwrap();
                    return Ok(Scalar::BoundColumnRef(BoundColumnRef {
                        column: ColumnBinding {
                            database_name: None,
                            table_name: None,
                            column_name: format!("subquery_{}", index),
                            index: *index,
                            data_type: column_binding.data_type.clone(),
                            visible_in_unqualified_wildcard: column_binding
                                .visible_in_unqualified_wildcard,
                        },
                    }));
                }
                Ok(scalar.clone())
            }
            Scalar::ConstantExpr(_) => Ok(scalar.clone()),
            Scalar::AndExpr(and_expr) => {
                let left = self.flatten_scalar(&and_expr.left, correlated_columns)?;
                let right = self.flatten_scalar(&and_expr.right, correlated_columns)?;
                Ok(Scalar::AndExpr(AndExpr {
                    left: Box::new(left),
                    right: Box::new(right),
                    return_type: and_expr.return_type.clone(),
                }))
            }
            Scalar::OrExpr(or_expr) => {
                let left = self.flatten_scalar(&or_expr.left, correlated_columns)?;
                let right = self.flatten_scalar(&or_expr.right, correlated_columns)?;
                Ok(Scalar::OrExpr(OrExpr {
                    left: Box::new(left),
                    right: Box::new(right),
                    return_type: or_expr.return_type.clone(),
                }))
            }
            Scalar::ComparisonExpr(comparison_expr) => {
                let left = self.flatten_scalar(&comparison_expr.left, correlated_columns)?;
                let right = self.flatten_scalar(&comparison_expr.right, correlated_columns)?;
                Ok(Scalar::ComparisonExpr(ComparisonExpr {
                    op: comparison_expr.op.clone(),
                    left: Box::new(left),
                    right: Box::new(right),
                    return_type: comparison_expr.return_type.clone(),
                }))
            }
            Scalar::AggregateFunction(agg) => {
                let mut args = Vec::with_capacity(agg.args.len());
                for arg in &agg.args {
                    args.push(self.flatten_scalar(arg, correlated_columns)?);
                }
                Ok(Scalar::AggregateFunction(AggregateFunction {
                    display_name: agg.display_name.clone(),
                    func_name: agg.func_name.clone(),
                    distinct: agg.distinct,
                    params: agg.params.clone(),
                    args,
                    return_type: agg.return_type.clone(),
                }))
            }
            Scalar::FunctionCall(fun_call) => {
                let mut arguments = Vec::with_capacity(fun_call.arguments.len());
                for arg in &fun_call.arguments {
                    arguments.push(self.flatten_scalar(arg, correlated_columns)?);
                }
                Ok(Scalar::FunctionCall(FunctionCall {
                    arguments,
                    func_name: fun_call.func_name.clone(),
                    arg_types: fun_call.arg_types.clone(),
                    return_type: fun_call.return_type.clone(),
                }))
            }
            Scalar::CastExpr(cast_expr) => {
                let scalar = self.flatten_scalar(&cast_expr.argument, correlated_columns)?;
                Ok(Scalar::CastExpr(CastExpr {
                    argument: Box::new(scalar),
                    from_type: cast_expr.from_type.clone(),
                    target_type: cast_expr.target_type.clone(),
                }))
            }
            _ => Err(ErrorCode::LogicalError(
                "Invalid scalar for flattening subquery",
            )),
        }
    }

    fn add_equi_conditions(
        &self,
        correlated_columns: &HashSet<IndexType>,
        left_conditions: &mut Vec<Scalar>,
        right_conditions: &mut Vec<Scalar>,
    ) -> Result<()> {
        for correlated_column in correlated_columns.iter() {
            let data_type = {
                let metadata = self.metadata.read();
                let column_entry = metadata.column(*correlated_column);
                column_entry.data_type.clone()
            };
            let right_column = Scalar::BoundColumnRef(BoundColumnRef {
                column: ColumnBinding {
                    database_name: None,
                    table_name: None,
                    column_name: format!("subquery_{}", correlated_column),
                    index: *correlated_column,
                    data_type: Box::from(data_type.clone()),
                    visible_in_unqualified_wildcard: false,
                },
            });
            let derive_column = self.derived_columns.get(correlated_column).unwrap();
            let left_column = Scalar::BoundColumnRef(BoundColumnRef {
                column: ColumnBinding {
                    database_name: None,
                    table_name: None,
                    column_name: format!("subquery_{}", derive_column),
                    index: *derive_column,
                    data_type: Box::from(data_type),
                    visible_in_unqualified_wildcard: false,
                },
            });
            left_conditions.push(left_column);
            right_conditions.push(right_column);
        }
        Ok(())
    }
}
